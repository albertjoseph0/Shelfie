Accept a payment
Securely accept payments online.
Build a payment form or use a prebuilt checkout page to start accepting online payments.


Web

iOS

Android

React Native

Plugins

Stripe-hosted page

Embedded form

Advanced integration
Redirect to a Stripe-hosted payment page using Stripe Checkout. See how this integration compares to Stripe’s other integration types.
Checkout preview
Integration effort
Low code
Integration type
Redirect to Stripe-hosted payment page
UI customization
Limited customization
Try it out
Use our official libraries to access the Stripe API from your application:
Command Line
Node


# Install with npm
npm install stripe --save
Redirect your customer to Stripe Checkout
Client-side
Server-side
Add a checkout button to your website that calls a server-side endpoint to create a Checkout Session.
You can also create a Checkout Session for an existing customer, allowing you to prefill Checkout fields with known contact information and unify your purchase history for that customer.
checkout.html


<html>
  <head>
    <title>Buy cool new product</title>
  </head>
  <body>
    <!-- Use action="/create-checkout-session.php" if your server is PHP based. -->
    <form action="/create-checkout-session" method="POST">
      <button type="submit">Checkout</button>
    </form>
  </body>
</html>
A Checkout Session is the programmatic representation of what your customer sees when they’re redirected to the payment form. You can configure it with options such as:
Line items to charge
Currencies to use
You must populate success_url with the URL value of a page on your website that Checkout returns your customer to after they complete the payment. You can optionally also provide a cancel_url value of a page on your website that Checkout returns your customer to if they terminate the payment process before completion.
Note
Checkout Sessions expire 24 hours after creation by default.
After creating a Checkout Session, redirect your customer to the URL returned in the response.
Node


// This example sets up an endpoint using the Express framework.
// Watch this video to get started: https://youtu.be/rPR2aJ6XnAc.

const express = require('express');
const app = express();
const stripe = require('stripe')('sk_test_51R4myZEmt0hEayiKwrFbaeevkmFRxrnYdXUF5OKLne3dFJoD0olOK7UL8rHMdTTgrahCo1gHoPhqojDMiK0JWI1500y2WXsNHM''sk_test_51R4myZEmt0hEayiKwr...MiK0JWI1500y2WXsNHM')

app.post('/create-checkout-session', async (req, res) => {
  const session = await stripe.checkout.sessions.create({
    line_items: [
      {
        price_data: {
          currency: 'usd',
          product_data: {
            name: 'T-shirt',
          },
          unit_amount: 2000,
        },
        quantity: 1,
      },
    ],
    mode: 'payment',
    success_url: 'http://localhost:4242/success',
    cancel_url: 'http://localhost:4242/cancel',
  });

  res.redirect(303, session.url);
});

app.listen(4242, () => console.log(`Listening on port ${4242}!`));
Payment methods
By default, Stripe enables cards and other common payment methods. You can turn individual payment methods on or off in the Stripe Dashboard. In Checkout, Stripe evaluates the currency and any restrictions, then dynamically presents the supported payment methods to the customer.
To see how your payment methods appear to customers, enter a transaction ID or set an order amount and currency in the Dashboard.
You can enable Apple Pay and Google Pay in your payment methods settings. By default, Apple Pay is enabled and Google Pay is disabled. However, in some cases Stripe filters them out even when they’re enabled. We filter Google Pay if you enable automatic tax without collecting a shipping address.
Checkout’s Stripe-hosted pages don’t need integration changes to enable Apple Pay or Google Pay. Stripe handles these payments the same way as other card payments.
Confirm your endpoint
Confirm your endpoint is accessible by starting your web server (for example, localhost:4242) and running the following command:
Command Line


curl -X POST -is "http://localhost:4242/create-checkout-session" -d ""
You should see a response in your terminal that looks like this:
Command Line


HTTP/1.1 303 See Other
Location: https://checkout.stripe.com/c/pay/cs_test_...
...
Testing
You should now have a working checkout button that redirects your customer to Stripe Checkout.
Click the checkout button.
You’re redirected to the Stripe Checkout payment form.
If your integration isn’t working:
Open the Network tab in your browser’s developer tools.
Click the checkout button and confirm it sent an XHR request to your server-side endpoint (POST /create-checkout-session).
Verify the request is returning a 200 status.
Use console.log(session) inside your button click listener to confirm the correct data returned.
Show a success page
Client-side
Server-side
It’s important for your customer to see a success page after they successfully submit the payment form. Host this success page on your site.
Create a minimal success page:
success.html


<html>
  <head><title>Thanks for your order!</title></head>
  <body>
    <h1>Thanks for your order!</h1>
    <p>
      We appreciate your business!
      If you have any questions, please email
      <a href="mailto:orders@example.com">orders@example.com</a>.
    </p>
  </body>
</html>
Next, update the Checkout Session creation endpoint to use this new page:
server.js
Node



// Set your secret key. Remember to switch to your live secret key in production.
// See your keys here: https://dashboard.stripe.com/apikeys
const stripe = require('stripe')('sk_test_51R4myZEmt0hEayiKwrFbaeevkmFRxrnYdXUF5OKLne3dFJoD0olOK7UL8rHMdTTgrahCo1gHoPhqojDMiK0JWI1500y2WXsNHM''sk_test_51R4myZEmt0hEayiKwr...MiK0JWI1500y2WXsNHM');

const session = await stripe.checkout.sessions.create({
  line_items: [
    {
      price_data: {
        currency: 'usd',
        product_data: {
          name: 'T-shirt',
        },
        unit_amount: 2000,
      },
      quantity: 1,
    },
  ],
  mode: 'payment',
  success_url: 'http://localhost:4242/success.html',
  cancel_url: 'http://localhost:4242/cancel.html',
});
Note
If you want to customize your success page, read the custom success page guide.
Testing
Click your checkout button.
Fill out the payment details with the test card information:
Enter 4242 4242 4242 4242 as the card number.
Enter any future date for card expiry.
Enter any 3-digit number for CVC.
Enter any billing postal code.
Click Pay.
You’re redirected to your new success page.
Next, find the new payment in the Stripe Dashboard. Successful payments appear in the Dashboard’s list of payments. When you click a payment, it takes you to the payment details page. The Checkout summary section contains billing information and the list of items purchased, which you can use to manually fulfill the order.
Handle post-payment events
Stripe sends a checkout.session.completed event when a customer completes a Checkout Session payment. Use the Dashboard webhook tool or follow the webhook guide to receive and handle these events, which might trigger you to:
Send an order confirmation email to your customer.
Log the sale in a database.
Start a shipping workflow.
Listen for these events rather than waiting for your customer to be redirected back to your website. Triggering fulfillment only from your Checkout landing page is unreliable. Setting up your integration to listen for asynchronous events allows you to accept different types of payment methods with a single integration.
Learn more in our fulfillment guide for Checkout.
Handle the following events when collecting payments with the Checkout:
EVENT	DESCRIPTION	ACTION
checkout.session.completed	Sent when a customer successfully completes a Checkout Session.	Send the customer an order confirmation and fulfill their order.
checkout.session.async_payment_succeeded	Sent when a payment made with a delayed payment method, such as ACH direct debt, succeeds.	Send the customer an order confirmation and fulfill their order.
checkout.session.async_payment_failed	Sent when a payment made with a delayed payment method, such as ACH direct debt, fails.	Notify the customer of the failure and bring them back on-session to attempt payment again.
Test your integration
To test your Stripe-hosted payment form integration:
Create a Checkout Session.
Fill out the payment details with a method from the following table.
Enter any future date for card expiry.
Enter any 3-digit number for CVC.
Enter any billing postal code.
Click Pay. You’re redirected to your success_url.
Go to the Dashboard and look for the payment on the Transactions page. If your payment succeeded, you’ll see it in that list.
Click your payment to see more details, like a Checkout summary with billing information and the list of purchased items. You can use this information to fulfill the order.
Learn more about testing your integration.